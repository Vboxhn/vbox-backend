// src/lib/api.ts
const BASE =
  process.env.NEXT_PUBLIC_API_URL?.replace(/\/$/, '') || 'http://localhost:5000';

// Utilidad para POST JSON
export async function postJSON<T>(
  path: string,
  data: unknown,
  init?: RequestInit
): Promise<T> {
  const res = await fetch(`${BASE}${path}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
    ...init,
  });

  // Si el backend envía error con JSON {message: "..."}
  if (!res.ok) {
    let msg = `HTTP ${res.status}`;
    try {
      const j = await res.json();
      if (j?.message) msg = j.message;
    } catch {}
    throw new Error(msg);
  }
  return res.json() as Promise<T>;
}

// ---------- ENDPOINTS ----------

// Registro de usuario (casillero)
export type RegisterForm = {
  nombre: string;   // <— IMPORTANTES estos nombres
  apellido: string;
  telefono: string;
  email: string;
  password: string;
};

export async function registerUserSmart(form: {
  name: string;
  lastName: string;
  phone: string;
  email: string;
  password: string;
}) {
  // Mapeo a las claves que el backend exige
  const payload: RegisterForm = {
    nombre: form.name?.trim(),
    apellido: form.lastName?.trim(),
    telefono: form.phone?.trim(),
    email: form.email?.trim(),
    password: form.password,
  };

  // Validación rápida del lado del cliente
  if (!payload.nombre || !payload.apellido || !payload.telefono || !payload.email || !payload.password) {
    throw new Error('Todos los campos son obligatorios');
  }

  return postJSON<{ message: string; userId: string }>('/api/register', payload);
}

// Login
export async function loginSmart(form: { email: string; password: string }) {
  const payload = { email: form.email?.trim(), password: form.password };
  return postJSON('/api/auth/login', payload);
}
